@model ChronosMVC.Models.Curriculo.ExperienciaModel

@{
    ViewData["Title"] = "Adicionar Experiência Profissional";
}
@section Styles {
    <link href="~/css/barraDeProgresso.css" rel="stylesheet" />
}


<h1>Adicionar Experiência Profissional</h1>

<form asp-action="CriarExperiencia" method="post">
    <div class="form-group">
        <label for="cargoExperiencia">Cargo</label>
        <input type="text" class="form-control" id="cargoExperiencia" name="cargoExperiencia" value="@Model.cargoExperiencia" required />
    </div>
    <br>
    <div class="form-group">
        <label for="empresaExperiencia">Empresa</label>
        <input type="text" class="form-control" id="empresaExperiencia" name="empresaExperiencia" value="@Model.empresaExperiencia" required />
    </div>
    <br>
    <div class="form-group">
    <label for="dataInicioExperiencia">Data de Início</label>
    <input type="date" class="form-control" id="dataInicioExperiencia" name="dataInicioExperiencia" 
           value="@Model.dataInicioExperiencia.ToString("yyyy-MM-dd")" required />
</div>
<br>
<div class="form-group">
    <label for="dataFimExperiencia">Data de Fim</label>
    <input type="date" class="form-control" id="dataFimExperiencia" name="dataFimExperiencia" 
           value="@Model.dataFimExperiencia?.ToString("yyyy-MM-dd")" />
</div>
<br>

<script>
    // Limitar a data máxima para 80 anos atrás (considerando 2024)
    const hoje = new Date();
    const limiteMaximo = new Date();
    limiteMaximo.setFullYear(hoje.getFullYear() - 80);  // Subtrai 80 anos da data de hoje

    // Formatar data para o formato yyyy-mm-dd
    const dataLimiteMaxima = limiteMaximo.toISOString().split('T')[0];

    // Definir o valor máximo nos inputs de data
    document.getElementById('dataInicioExperiencia').setAttribute('max', dataLimiteMaxima);
    document.getElementById('dataFimExperiencia').setAttribute('max', dataLimiteMaxima);

    // Função para garantir que a data de fim não seja anterior à data de início
    const dataInicio = document.getElementById('dataInicioExperiencia');
    const dataFim = document.getElementById('dataFimExperiencia');

    // A cada alteração na data de início, ajustar o valor mínimo da data de fim
    dataInicio.addEventListener('input', function() {
        const dataSelecionadaInicio = dataInicio.value;
        dataFim.setAttribute('min', dataSelecionadaInicio); // A data mínima da data de fim é a data de início
        // Se a data de fim for antes da data de início, vamos corrigir automaticamente
        if (dataFim.value && dataFim.value < dataSelecionadaInicio) {
            dataFim.value = dataSelecionadaInicio; // Ajusta automaticamente a data de fim para a data de início
        }
    });

</script>

    <div class="form-group">
        <label for="Descricao">Descrição da Experiência</label>
        <textarea class="form-control" id="Descricao" name="Descricao" rows="5" required>@Model.Descricao</textarea>
    </div>
    <br><br>
    <button type="submit" class="btn btn-primary">Adicionar Experiência</button>
</form>

<!-- Barra de progresso com animação -->
<div class="position-relative m-4">
    <div class="progress" role="progressbar" aria-label="Progress" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="height: 1px;">
        <div class="progress-bar" style="width: 33%"></div>
    </div>
    <!-- Botões representando as etapas -->
    <button id="avancar" type="button" class="position-absolute top-0 start-0 translate-middle btn btn-sm btn-primary rounded-pill step-btn" style="width: 2rem; height:2rem;">1</button>
    <button id="retroceder" type="button" class="position-absolute top-0 start-50 translate-middle btn btn-sm btn-secondary rounded-pill step-btn" style="width: 2rem; height:2rem;">2</button>
    <button type="button" class="position-absolute top-0 start-100 translate-middle btn btn-sm btn-secondary rounded-pill step-btn" style="width: 2rem; height:2rem;">3</button>
</div>

<a href="@Url.Action("Detalhes", "Curriculo")" class="btn btn-secondary mt-3">Voltar para os Detalhes do Currículo</a>
